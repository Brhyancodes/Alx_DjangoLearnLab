"""
Django settings for LibraryProject project.

Generated by 'django-admin startproject' using Django 5.2.5.

This file has been annotated and hardened for HTTPS production deployments.
Make sure you set the required environment variables in production (see notes below).
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# -----------------------
# ENV helpers & parsing
# -----------------------
def env_bool(name: str, default: bool = False) -> bool:
    val = os.environ.get(name, str(default))
    return val.lower() in ("1", "true", "yes")


# --------------------------------------------------------------------
# SECURITY: Environment-based settings (use env vars in production)
# --------------------------------------------------------------------

# Secret key (must be set in production)
SECRET_KEY = os.environ.get("DJANGO_SECRET_KEY", "dev-secret-key-do-not-use-in-prod")

# Debug mode - MUST be False in production
DEBUG = env_bool("DJANGO_DEBUG", True)

# Allowed hosts - in production set a comma-separated list, e.g. "example.com,www.example.com"
ALLOWED_HOSTS = [
    h.strip()
    for h in os.environ.get("DJANGO_ALLOWED_HOSTS", "127.0.0.1,localhost").split(",")
    if h.strip()
]

# Recommended: explicitly list CSRF trusted origins (MUST include scheme, e.g. https://example.com)
CSRF_TRUSTED_ORIGINS = [
    u.strip()
    for u in os.environ.get("DJANGO_CSRF_TRUSTED_ORIGINS", "").split(",")
    if u.strip()
]
# Example for production environment variable value:
# DJANGO_CSRF_TRUSTED_ORIGINS="https://yourdomain.com,https://api.yourdomain.com"

# If your app is behind a reverse proxy/load balancer that terminates SSL (common case),
# enable this and ensure the proxy sets X-Forwarded-Proto.
if env_bool("DJANGO_BEHIND_PROXY", False):
    # Set this only when you *know* a front-facing proxy is setting X-Forwarded-Proto correctly.
    SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

# --------------------------------------------------------------------
# Application definition
# --------------------------------------------------------------------
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "bookshelf",
    "relationship_app",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    # Optional CSP middleware (if django-csp is installed)
    # "csp.middleware.CSPMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    # Optional custom CSP middleware
    # "LibraryProject.middleware.ContentSecurityPolicyMiddleware",
]

ROOT_URLCONF = "LibraryProject.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "LibraryProject.wsgi.application"

# --------------------------------------------------------------------
# Database (dev default; swap via env or separate production settings)
# --------------------------------------------------------------------
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}

# --------------------------------------------------------------------
# Authentication
# --------------------------------------------------------------------
AUTH_USER_MODEL = "bookshelf.CustomUser"

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

# --------------------------------------------------------------------
# Internationalization
# --------------------------------------------------------------------
LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_TZ = True

# --------------------------------------------------------------------
# Static files
# --------------------------------------------------------------------
STATIC_URL = "static/"

# Default primary key field type
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# --------------------------------------------------------------------
# Security Headers & Cookies
# --------------------------------------------------------------------
# XSS and content type protections
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True

# Clickjacking protection
X_FRAME_OPTIONS = "DENY"

# Referrer policy (recommended)
# 'strict-origin-when-cross-origin' is a sensible default balancing privacy and usability.
SECURE_REFERRER_POLICY = os.environ.get(
    "SECURE_REFERRER_POLICY", "strict-origin-when-cross-origin"
)

# Cookies - conservative defaults for production
# Note: SESSION_COOKIE_SECURE & CSRF_COOKIE_SECURE should be True when serving via HTTPS.
SESSION_COOKIE_SECURE = not DEBUG or env_bool("SESSION_COOKIE_SECURE", True)
CSRF_COOKIE_SECURE = not DEBUG or env_bool("CSRF_COOKIE_SECURE", True)

# Prevent JS from reading session cookie
SESSION_COOKIE_HTTPONLY = True

# CSRF cookie HTTPOnly: typically False so front-end JS can read CSRF token for AJAX.
# Set to True only if you do not rely on reading CSRF token from JS.
CSRF_COOKIE_HTTPONLY = env_bool("CSRF_COOKIE_HTTPONLY", False)

# SameSite - 'Lax' is a good default; change to 'Strict' if your app does not require cross-site POSTs.
SESSION_COOKIE_SAMESITE = os.environ.get("SESSION_COOKIE_SAMESITE", "Lax")
CSRF_COOKIE_SAMESITE = os.environ.get("CSRF_COOKIE_SAMESITE", "Lax")

# HSTS (HTTP Strict Transport Security)
# Only enable long HSTS values in production. Browsers will cache this and enforce HTTPS.
SECURE_HSTS_SECONDS = (
    0 if DEBUG else int(os.environ.get("SECURE_HSTS_SECONDS", "31536000"))
)
SECURE_HSTS_INCLUDE_SUBDOMAINS = (
    False if DEBUG else env_bool("SECURE_HSTS_INCLUDE_SUBDOMAINS", True)
)
SECURE_HSTS_PRELOAD = False if DEBUG else env_bool("SECURE_HSTS_PRELOAD", True)

# Enforce HTTPS redirect at Django level (still recommend redirect at proxy/nginx level too)
SECURE_SSL_REDIRECT = False if DEBUG else env_bool("SECURE_SSL_REDIRECT", True)

# --------------------------------------------------------------------
# Content Security Policy (CSP) - requires django-csp or custom middleware
# --------------------------------------------------------------------
# Enable and adjust these when you know exactly which external resources you use.
# Example if using django-csp:
# CSP_DEFAULT_SRC = ("'self'",)
# CSP_SCRIPT_SRC = ("'self'", "https://cdnjs.cloudflare.com")
# CSP_STYLE_SRC = ("'self'", "https://fonts.googleapis.com")
# CSP_IMG_SRC = ("'self'", "data:")
# CSP_FONT_SRC = ("'self'", "https://fonts.gstatic.com")

# --------------------------------------------------------------------
# Additional production hints
# --------------------------------------------------------------------
# - Always run with DEBUG=False in production.
# - Set DJANGO_SECRET_KEY in the production environment.
# - Restrict ALLOWED_HOSTS to your domain(s).
# - Set DJANGO_BEHIND_PROXY=True if using Nginx/Load Balancer and make sure it sets X-Forwarded-Proto.
# - Consider adding more strict CSP rules and use django-csp.
# - Consider rotating keys and using a secrets manager for SECRET_KEY and DB credentials.
